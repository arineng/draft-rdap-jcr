<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "http://xml.resource.org/authoring/rfc2629.dtd"
[
<!ENTITY RFC5988 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5988.xml'>
<!ENTITY RFC7095 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7095.xml'>
<!ENTITY RFC7159 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7159.xml'>
<!ENTITY RFC7483 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7483.xml'>
<!ENTITY I-D.newton-json-content-rules PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.newton-json-content-rules.xml'>

        <!ENTITY rdap_all PUBLIC '' 'jcr/rdap_all.jcr'>
        <!ENTITY rdap_roots PUBLIC '' 'jcr/rdap_roots.jcr'>
        <!ENTITY rdap_response_mixin PUBLIC '' 'jcr/rdap_response_mixin.jcr'>
        <!ENTITY rdap_conformance PUBLIC '' 'jcr/rdap_conformance.jcr'>
        <!ENTITY rdap_links PUBLIC '' 'jcr/rdap_links.jcr'>
        <!ENTITY rdap_notices PUBLIC '' 'jcr/rdap_notices.jcr'>
        <!ENTITY rdap_language PUBLIC '' 'jcr/rdap_language.jcr'>
        <!ENTITY rdap_events PUBLIC '' 'jcr/rdap_events.jcr'>
        <!ENTITY rdap_status PUBLIC '' 'jcr/rdap_status.jcr'>
        <!ENTITY rdap_port PUBLIC '' 'jcr/rdap_port.jcr'>
        <!ENTITY rdap_publicids PUBLIC '' 'jcr/rdap_publicids.jcr'>
        <!ENTITY rdap_common_mixin PUBLIC '' 'jcr/rdap_common_mixin.jcr'>
        <!ENTITY rdap_entity PUBLIC '' 'jcr/rdap_entity.jcr'>
        <!ENTITY rdap_vcard_array PUBLIC '' 'jcr/rdap_vcard_array.jcr'>
        <!ENTITY rdap_vcard_properties PUBLIC '' 'jcr/rdap_vcard_properties.jcr'>
        <!ENTITY rdap_vcard_params PUBLIC '' 'jcr/rdap_vcard_params.jcr'>
        <!ENTITY rdap_vcard_values PUBLIC '' 'jcr/rdap_vcard_values.jcr'>
        <!ENTITY rdap_nameserver PUBLIC '' 'jcr/rdap_nameserver.jcr'>
        <!ENTITY rdap_domain PUBLIC '' 'jcr/rdap_domain.jcr'>
        <!ENTITY rdap_network PUBLIC '' 'jcr/rdap_network.jcr'>
        <!ENTITY rdap_autnum PUBLIC '' 'jcr/rdap_autnum.jcr'>
        <!ENTITY rdap_error PUBLIC '' 'jcr/rdap_error.jcr'>
        <!ENTITY rdap_searches PUBLIC '' 'jcr/rdap_searches.jcr'>

        <!ENTITY strict_all PUBLIC '' 'jcr/strict_all.jcr'>
        <!ENTITY strict_object_classes PUBLIC '' 'jcr/strict_object_classes.jcr'>
        <!ENTITY strict_help_and_error PUBLIC '' 'jcr/strict_help_and_error.jcr'>
        <!ENTITY strict_search_responses PUBLIC '' 'jcr/strict_search_responses.jcr'>
        <!ENTITY strict_object_class_mixins PUBLIC '' 'jcr/strict_object_class_mixins.jcr'>
        <!ENTITY strict_searches PUBLIC '' 'jcr/strict_searches.jcr'>
        <!ENTITY strict_iana_status_values PUBLIC '' 'jcr/strict_iana_status_values.jcr'>
        <!ENTITY strict_iana_notice_remark_types PUBLIC '' 'jcr/strict_iana_notice_remark_types.jcr'>
        <!ENTITY strict_iana_roles PUBLIC '' 'jcr/strict_iana_roles.jcr'>
        <!ENTITY strict_iana_domain_variant_relations PUBLIC '' 'jcr/strict_iana_domain_variant_relations.jcr'>
        <!ENTITY strict_iana_event_actions PUBLIC '' 'jcr/strict_iana_event_actions.jcr'>
]>
<?rfc toc="yes"?>
<rfc category="info" docName="draft-newton-rdap-jcr-06" ipr="trust200902">
    <front>
        <title abbrev="JCR for RDAP">A Description of RDAP JSON Messages Using JSON Content Rules</title>
        <author fullname="Andrew Lee Newton" initials="A.L." surname="Newton">
            <organization abbrev="ARIN">American Registry for Internet Numbers</organization>
            <address>
                <postal>
                    <street>3635 Concorde Parkway</street>
                    <city>Chantilly</city>
                    <region>VA</region>
                    <country>US</country>
                    <code>20151</code>
                </postal>
                <email>andy@arin.net</email>
                <uri>http://www.arin.net</uri>
            </address>
        </author>
        <date/>
        <abstract>
            <t>
                This document describes the JSON responses in the Registration Data Access
                Protocol with the formal notation of JSON Content Rules.
            </t>
        </abstract>
    </front>
    <middle>
        <section title="Introduction">
            <t>
                The <xref target="RFC7159">JSON</xref> responses of the
                <xref target="RFC7483">Registration Data Access Protocol</xref> are officially defined
                with English prose. Those definitions contain imprecise or ambiguous JSON 
                structures and require lengthy, tedious examples in the attempt to offer
                clarification. The English prose can be difficult for non-native English readers,
                and the examples create their own confusion.
            </t>
            <t>
                This document describes the JSON found in RDAP with 
                <xref target="I-D.newton-json-content-rules">JSON Content Rules</xref> (JCR).
            </t>
            <t>
                JCR overcomes some of the obstacles of describing JSON with English prose, reducing
                the tediousness of the prose and accompanying lengthy examples to understandable
                data structures. Additionally, JCR has mechanisms which can be used by software
                developers to create test harnesses and technology compatibility kits.
            </t>
            <t>
                Though this document describes all of the JSON found in <xref target="RFC7483"></xref>,
                it presents the structures in a different order. The rules defined here use the JCR
                mixin style of specification, where common structures are defined in group rules instead
                of separately, distinct objects.
            </t>
        </section>
        <section title="Response">
            <t>
                <xref target="RFC7483"></xref> describes ten distinct JSON response: five
                entity class response, an error response, a help response, and three search
                responses.
            </t>
            <figure anchor="roots">
                <artwork xml:space="preserve" align="center">
&rdap_roots;
                </artwork>
            </figure>
            <t>
                All of the responses have a common set of object members described
                by response_mixin.
            </t>
            <figure anchor="response_mixin">
                <artwork xml:space="preserve" align="center">
&rdap_response_mixin;
                </artwork>
            </figure>
        </section>
        <section title="Object Classes">
            <t>
                The primary data structures in RDAP are called object classes. These are first order
                object instances with identifiers. They are JSON objects which contain other JSON data
                types.
            </t>
            <section title="Entity Object Class">
                <t>
                    The Entity object class represents persons or organizations.
                </t>
                <figure anchor="entity">
                    <artwork xml:space="preserve" align="center">
&rdap_entity;
                </artwork>
                </figure>
                <t>
                    The Entity object class incorporates
                    <xref target="RFC7095">jCard</xref> (vCard in JSON) for contact information.
                </t>
                <figure anchor="vcard_array">
                    <preamble>
                        Each jCard is made up of vCard properties in an array.
                        The very first property must be "version", and the "fn"
                        property must appear once and only once.
                    </preamble>
                    <artwork xml:space="preserve" align="center">
&rdap_vcard_array;
                </artwork>
                </figure>
                <figure anchor="vcard_properties">
                    <preamble>
                        Each vCard property is composed of a property name,
                        a set of parameters, and data values.
                    </preamble>
                    <artwork xml:space="preserve" align="center">
&rdap_vcard_properties;
                </artwork>
                </figure>
                <figure anchor="vcard_params">
                    <preamble>
                        vCard parameters are grouped into a JSON object, where
                        each member of the object is a parameter.
                    </preamble>
                    <artwork xml:space="preserve" align="center">
&rdap_vcard_params;
                </artwork>
                </figure>
                <figure anchor="vcard_values">
                    <preamble>
                        vCard values are determined by a string denoting the
                        value type, followed by the value or an array of those
                        values.
                    </preamble>
                    <artwork xml:space="preserve" align="center">
&rdap_vcard_values;
                </artwork>
                </figure>
            </section>
            <section title="Nameserver Object Class">
                <t>
                    The nameserver object class represents DNS nameservers in registries.
                </t>
                <figure anchor="nameserver">
                    <artwork xml:space="preserve" align="center">
&rdap_nameserver;
                </artwork>
                </figure>
            </section>
            <section title="Domain Object Class">
                <t>
                    The Domain object class is the most complex of all the object classes
                    defined in RDAP. It represents both forward and reverse DNS delegations.
                    It's complexity is mostly due to the DNSSEC provisions of the object class.
                </t>
                <figure anchor="domain">
                    <artwork xml:space="preserve" align="center">
&rdap_domain;
                </artwork>
                </figure>
            </section>
            <section title="IP Network Object Class">
                <t>
                    The IP Network object class represents IP network registrations in RIRs.
                </t>
                <figure anchor="network">
                    <artwork xml:space="preserve" align="center">
&rdap_network;
                </artwork>
                </figure>
            </section>
            <section title="Autnum Object Class">
                <t>
                    The Autnum object class represents an autonomous system number or blocks of
                    autonomous system numbers in an RIR.
                </t>
                <figure anchor="autnum">
                    <artwork xml:space="preserve" align="center">
&rdap_autnum;
                </artwork>
                </figure>
            </section>
        </section>
        <section title="Search Results">
            <t>
                Search results in RDAP are merely arrays of object classes.
            </t>
            <figure anchor="searches">
                <artwork xml:space="preserve" align="center">
&rdap_searches;
                </artwork>
            </figure>
        </section>
        <section title="Error Response">
            <t>
                Section 6 of <xref target="RFC7483"></xref> describes RDAP error responses.
            </t>
            <figure anchor="error">
                <artwork xml:space="preserve" align="center">
&rdap_error;
                </artwork>
            </figure>
        </section>
        <section title="Common Structures">
            <t>
                Section 4 of <xref target="RFC7483"></xref> describes eight common structures
                used throughout the JSON in RDAP.
            </t>
            <t>
                Most of these common structures are grouped together in a rule called common_mixin.
            </t>
            <figure anchor="common_mixin">
                <artwork xml:space="preserve" align="center">
&rdap_common_mixin;
                </artwork>
            </figure>
            <section title="RDAP Conformance">
                <t>
                    The rdapConformance array is the versioning and capabilities negotiation
                    mechanism of RDAP.
                </t>
                <figure anchor="conformance">
                    <artwork xml:space="preserve" align="center">
&rdap_conformance;
                    </artwork>
                </figure>
            </section>
            <section title="Links">
                <t>
                    Structures in RDAP may link to information in other data systems
                    using links. Additionally, RDAP uses "self" links to identify instances
                    of RDAP object classes. The data found in each link is described by
                    <xref target="RFC5988"></xref>.
                </t>
                <t>
                    RDAP links are an array of distinct objects, each representing
                    a separate link.
                </t>
                <figure anchor="links">
                    <artwork xml:space="preserve" align="center">
&rdap_links;
                    </artwork>
                </figure>
            </section>
            <section title="Notices And Remarks">
                <t>
                    In RDAP, notices and remarks share the same structure. The difference is that
                    notices are meta-data regarding the entirety of a response whereas remarks are
                    meta-data covering a specific instance of an object class.
                </t>
                <figure anchor="notices">
                    <artwork xml:space="preserve" align="center">
&rdap_notices;
                    </artwork>
                </figure>
            </section>
            <section title="Language Identifier">
                <t>
                    The "lang" member occurs many RDAP data structures. And the same construct is
                    used in the links structures.
                </t>
                <figure anchor="language">
                    <artwork xml:space="preserve" align="center">
&rdap_language;
                    </artwork>
                </figure>
            </section>
            <section title="Events">
                <t>
                    RDAP events note when a specific action has occured on an object instance,
                    and by whom. The same structure appears in all object classes, as well as
                    being re-used by entities embedded by other objects.
                </t>
                <figure anchor="events">
                    <artwork xml:space="preserve" align="center">
&rdap_events;
                    </artwork>
                </figure>
            </section>

            <section title="Status">
                <t>
                    The status of RDAP object instances is indicated by an array of strings,
                    where the value of the strings are registered in an IANA registry.
                </t>
                <figure anchor="status">
                    <artwork xml:space="preserve" align="center">
&rdap_status;
                    </artwork>
                </figure>
            </section>
            <section title="Port 43">
                <t>
                    RDAP object classes reference their corresponding Whois representation
                    using the "port43" object member. This is simply a string holding the hostname
                    of the Whois service.
                </t>
                <figure anchor="port">
                    <artwork xml:space="preserve" align="center">
&rdap_port;
                    </artwork>
                </figure>
            </section>
            <section title="Public IDs">
                <t>
                    Some RDAP services are required to identify entities and domains by
                    public identifiers, such as ICANN Registrar IDs. The publicIds object
                    member is an array of objects to represent these identifiers.
                </t>
                <figure anchor="publicids">
                    <artwork xml:space="preserve" align="center">
&rdap_publicids;
                    </artwork>
                </figure>
            </section>
        </section>
        <section title="Validating Responses">
            <t>
                Many JSON roots for RDAP are defined in <xref target="roots"></xref>. For applications where an RDAP
                query must yield a specific response, the appropriate root must be used for validating the response.
            </t>
            <t>
                For example, if the RDAP query https://example.com/rdap/ip/2001:db8::0 is expected to yield an IP
                network response, then the validation must only use the $network_response root.
            </t>
        </section>
        <section title="Stricter Validation">
            <t>
                RDAP has a very lenient JSON model where information and structures not strictly forbidden are
                allowed. However, this lenient model allows information from RDAP help and error responses to be
                found in other responses, and responses for single objects to be found in responses from searches.
            </t>
            <t>
                For applications where these structures cannot be mixed and validation is desired, override rules
                may be used.
            </t>
            <t>
                For readability, two new rules are created to group the single objects and the search results.
            </t>
            <figure anchor="object_class_mixins">
                <preamble>
                    The responses with a single object returned represented by mixins. This rule groups those
                    mixins.
                </preamble>
                <artwork xml:space="preserve" align="center">
&strict_object_class_mixins;
                </artwork>
            </figure>
            <figure anchor="search_results">
                <preamble>
                    The responses to searches are objects containing a single search member which is an array containing
                    the object class mixins. This rule groups the search members.
                </preamble>
                <artwork xml:space="preserve" align="center">
&strict_searches;
                </artwork>
            </figure>
            <t>
                Using the new rules in <xref target="object_class_mixins"></xref> and <xref target="search_results"></xref>,
                override rules (rules rewriting existing rules) can be written for greater strictness.
            </t>
            <figure anchor="object_classes">
                <preamble>
                    These rules for single object responses prevent search and error response elements to be present.
                </preamble>
                <artwork xml:space="preserve" align="center">
&strict_object_classes;
                </artwork>
            </figure>
            <figure anchor="help_and_error">
                <preamble>
                    These rules for help and error responses prevent single object and search arrays.
                </preamble>
                <artwork xml:space="preserve" align="center">
&strict_help_and_error;
                </artwork>
            </figure>
            <figure anchor="search_responses">
                <preamble>
                    These rules for search responses prevent single object and error data structures.
                </preamble>
                <artwork xml:space="preserve" align="center">
&strict_search_responses;
                </artwork>
            </figure>
            <t>
                Stricter validation is also possible by overriding rules that take generic strings
                and overriding them with enumerated lists of values from the RDAP JSON values
                registry.
            </t>
            <figure anchor="iana_domain_variant_relations">
                <preamble>
                    These rules override the generic domain variant relations in RDAP with values
                    found in the IANA registry.
                </preamble>
                <artwork xml:space="preserve" align="center">
&strict_iana_domain_variant_relations;
                </artwork>
            </figure>
            <figure anchor="iana_event_actions">
                <preamble>
                    These rules override the generic event actions in RDAP with values
                    found in the IANA registry.
                </preamble>
                <artwork xml:space="preserve" align="center">
&strict_iana_event_actions;
                </artwork>
            </figure>
            <figure anchor="iana_notice_remark_types">
                <preamble>
                    These rules override the generic notice and remark types in RDAP with values
                    found in the IANA registry.
                </preamble>
                <artwork xml:space="preserve" align="center">
&strict_iana_notice_remark_types;
                </artwork>
            </figure>
            <figure anchor="iana_roles">
                <preamble>
                    These rules override the generic entity roles in RDAP with values
                    found in the IANA registry.
                </preamble>
                <artwork xml:space="preserve" align="center">
&strict_iana_roles;
                </artwork>
            </figure>
            <figure anchor="iana_status_values">
                <preamble>
                    These rules override the generic status values in RDAP with values
                    found in the IANA registry.
                </preamble>
                <artwork xml:space="preserve" align="center">
&strict_iana_status_values;
                </artwork>
            </figure>
        </section>
        <section title="Complete Rulesets for RDAP">
            <t>
                The following rulesets, along with a test framework and examples of good and bad RDAP JSON
                instances, may be found at <eref target="https://github.com/arineng/draft-rdap-jcr"></eref>.
            </t>
            <figure title="Complete Ruleset for RDAP" anchor="rdap_all">
                <preamble>
                    The following is the complete ruleset of JSON Content Rules for RDAP.
                </preamble>
                <artwork xml:space="preserve" align="center">
&rdap_all;
                </artwork>
            </figure>
            <figure title="Override Ruleset for RDAP" anchor="string_all">
                <preamble>
                    The following is the complete ruleset of override rules for stricter validation of RDAP.
                </preamble>
                <artwork xml:space="preserve" align="center">
&strict_all;
                </artwork>
            </figure>
        </section>

    </middle>
    <back>
        <references title="Normative References">
            
            &RFC5988;
            &RFC7095;
            &RFC7159;
            &RFC7483;
            &I-D.newton-json-content-rules;
            
        </references>
        <section title="Acknowledgements">
            <t>
                Bernhard Reutner-Fischer and participants of the IETF REGEXT mailing list contributed
                to the JCR found in this document.
            </t>
            <t>
                Mario Loffredo provided significant feedback on the rulesets in this document,
                especially with regard to jCard validation, and provided helpful guidance on
                validation based on his own experience with the implementation of an RDAP validator.
            </t>
        </section>
    </back>
</rfc>
